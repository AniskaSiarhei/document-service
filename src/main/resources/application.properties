# ===================================================================
# SERVER CONFIGURATION
# ===================================================================
# Порт, на котором будет работать приложение
server.port=8080

# Активируем 'dev' профиль по умолчанию.
# При запуске в Docker эта переменная будет переопределена на 'docker'.
spring.profiles.active=dev
# -------------------------


# ===================================================================
# SPRING DATASOURCE (POSTGRESQL) CONFIGURATION
# ===================================================================
# URL для подключения к PostgreSQL. 'postgres' - это имя сервиса из docker-compose.yml
spring.datasource.url=jdbc:postgresql://localhost:5432/document_storage
# Имя пользователя и пароль, указанные в docker-compose.yml
spring.datasource.username=postgres
spring.datasource.password=123456789
spring.datasource.driver-class-name=org.postgresql.Driver

# ===================================================================
# JPA / HIBERNATE CONFIGURATION
# ===================================================================
# Указываем диалект для PostgreSQL, чтобы Hibernate генерировал правильный SQL
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
# Стратегия обновления схемы БД.
# 'update' - автоматически обновляет схему при запуске, подходит для разработки.
# 'validate' - проверяет схему, не внося изменений.
# 'none' - ничего не делает. Для продакшена лучше использовать Liquibase или Flyway.
#spring.jpa.hibernate.ddl-auto=update
spring.jpa.hibernate.ddl-auto=validate
# Показывать сгенерированные SQL-запросы в логах
spring.jpa.show-sql=true

# ===================================================================
# FLYWAY DATABASE MIGRATION CONFIGURATION
# ===================================================================
# --- ИЗМЕНЕНИЕ №2: Явно включаем Flyway ---
# Spring Boot автоматически найдет и применит SQL-миграции из 'src/main/resources/db/migration'
spring.flyway.enabled=true

# ===================================================================
# MINIO (S3 STORAGE) CONFIGURATION
# ===================================================================
# URL для подключения к MinIO API. 'minio' - имя сервиса из docker-compose.yml
# При локальном запуске без докера используйте localhost
minio.url=http://localhost:9000
# Ключи доступа, указанные в docker-compose.yml
minio.access.key=minio
minio.secret.key=minio123
# Название "корзины" (bucket), где будут храниться файлы.
# Приложение попытается создать её при старте, если она не существует.
minio.bucket.name=documents

# ===================================================================
# JWT (JSON WEB TOKEN) CONFIGURATION
# ===================================================================
# Секретный ключ для подписи токенов. ДОЛЖЕН БЫТЬ ДЛИННЫМ И СЛОЖНЫМ.
# Для примера используем простой, но в проде его нужно вынести в переменные окружения.
jwt.secret=yXh6jK7P+93Tg7FZ3aYB5kS9D7tD6qxqRnVXbprkCkVq0uWmRhyj9zU6g7bQn4DJ4j8J8h3R8l6QkW5cHkqz9w==
# Время жизни токена в миллисекундах (например, 24 часа)
jwt.expiration=86400000

# ===================================================================
# SPRINGDOC (SWAGGER UI) CONFIGURATION
# ===================================================================
# Путь к Swagger UI
springdoc.swagger-ui.path=/swagger-ui.html
# Путь к OpenAPI спецификации
springdoc.api-docs.path=/v3/api-docs

# Web UI
spring.thymeleaf.cache=false

# Logging
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.orm.jdbc.bind=TRACE